//AutoGenerated Begin
//DO NOT EDIT!
package simx.components.editor.gui

import java.awt.{RenderingHints, Graphics2D, Color}
import javax.swing.{JComponent, InputVerifier}

import simplex3d.math.{ConstVec3i, ConstVec2i}

import scala.reflect.ClassTag
import scala.swing
import scala.swing._
import simplex3d.math.floatx.{ConstVec2f, ConstVec3f, Vec3f}


class ConstVec3fSVarViewGenerator4f5b557081d44eb8bf9a99a581d3a2fd extends SVarViewGenerator[ConstVec3f] {

  def generate: SVarView[ConstVec3f] = new SVarView[ConstVec3f] {

//AutoGenerated END
//Put your code below

    val MAX_HISTORY = 60
    val data = new History[ConstVec3f](Vec3f.Zero)
    val _s = 200
    val center = ConstVec2i(_s/2,_s/2)
    val colorStep = ConstVec3i(255/MAX_HISTORY)

    class History[T <: ConstVec3f : ClassTag](default: T, maxHistory: Int = MAX_HISTORY) {
      private val data = new Array[T](maxHistory)
      for(i <- 0 until maxHistory) data(i) = default
      private var cursor = 0

      def prepend(value: T): Unit = {
        data(cursor) = value
        cursor = (cursor + 1) % maxHistory
      }

      def foreach(f: (T) => Any): Unit = {
        for(i <- 0 until maxHistory) {
          var c = (cursor - 1) - i
          if(c < 0) c += maxHistory
          c = c % maxHistory
          f(data(c))
        }
      }

      override def toString(): String = {
        data.map{d => ConstVec2i(d.xy* 100f) }.mkString(", ")
      }

    }

    val dataPanel = new Label {

      minimumSize = new Dimension(_s, _s)
      preferredSize = new Dimension(_s, _s)
      maximumSize = new Dimension(_s, _s)

      override def paint(g: Graphics2D) {
        super.paint(g)

        g.setColor(Color.white)
        g.fillRect(0, 0, _s, _s)

        g.setColor(Color.RED)
        g.drawArc(0,0,_s,_s,0, 360)

        var last: Option[ConstVec2i] = None
        var color = ConstVec3i(0,0,0)
        val s = scale.text.toFloat
//        println(data)
        data.foreach{d =>
          var p: ConstVec2i = if(xBtn.selected) ConstVec2i(d.yz*s) else if(yBtn.selected) ConstVec2i(d.xz*s) else ConstVec2i(d.xy*s)
          p = center - p
          last.foreach{l =>
            g.setColor(new Color(color.x, color.y, color.z))
            //println(p,l)
            g.drawLine(p.x,p.y,l.x,l.y)
          }
          last = Some(p)
          color += colorStep
        }

      }
    }

    val xBtn = new RadioButton("x")
    val yBtn = new RadioButton("y")
    val zBtn = new RadioButton("z") {
      selected = true
    }

    val scale = new TextField("1") {
      val placeholder = "scale"

      peer.setInputVerifier(new InputVerifier {
        override def verify(input: JComponent) = {
          try {
            text.toFloat
            opaque = false
            background = Color.white
            true
          } catch { case e: Throwable =>
            opaque = true
            background = Color.red
            false
          }
        }
      })

      protected override def paintComponent(pG: Graphics2D) {
        super.paintComponent(pG)
        if (placeholder.length == 0 || text.length > 0) {
          return
        }
        val g: Graphics2D = pG.asInstanceOf[Graphics2D]
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON)
        g.setColor(Color.GRAY)
        g.drawString(placeholder, peer.getInsets.left, pG.getFontMetrics.getMaxAscent + peer.getInsets.top)
      }
    }

    val btnGroup = new ButtonGroup(xBtn, yBtn, zBtn)
    val settingsLayout = new GridPanel(4,1) {
      contents += xBtn
      contents += yBtn
      contents += zBtn
      contents += scale
    }

    val group = new GridPanel(1,2) {
      contents += dataPanel
      contents += settingsLayout
    }


    /**
     *  The scala.swing.Component that visualizes the value.
     */
    //Todo: Implement yourself!
    val component = group

    /**
      *  This function is called whenever the visualized value changes.
      *  It should update component accordingly.
      */
    //Todo: Implement yourself!
    def update(sVarValue: ConstVec3f) {
      data.prepend(sVarValue)
      dataPanel.repaint()
      //component.text = sVarValue.toString
    }

  }

  /**
   *  The name of this visualizer.
   *  This must not be unique.
   */
  //Todo: Name it!
  val name: String = "Projected View"

}