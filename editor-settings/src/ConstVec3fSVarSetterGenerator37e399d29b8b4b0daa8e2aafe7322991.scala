//AutoGenerated Begin
//DO NOT EDIT!
package simx.components.editor.gui

import java.awt.Color
import javax.swing.{JComponent, InputVerifier}

import scala.swing._
import simplex3d.math.floatx.{Vec3f, ConstVec3f}

import scala.swing.event.EditDone


class ConstVec3fSVarSetterGenerator37e399d29b8b4b0daa8e2aafe7322991 extends SVarSetterGenerator[ConstVec3f] {

  def generate: SVarSetter[ConstVec3f] = new SVarSetter[ConstVec3f] {

//AutoGenerated END
//Put your code below

    /**
     *  The scala.swing.Component that visualizes the SVar setter.
     *  Call
     *  setSvar(newValue: ConstVec3f): Unit
     *  to set new svar value.
     */
    val xlable = new Label("x: ")
    val ylable = new Label("y: ")
    val zlable = new Label("z: ")

    val xtextField = new TextField(){
      preferredSize = new Dimension(70, preferredSize.height)

      listenTo(this)
      peer.setInputVerifier(new InputVerifier {
        override def verify(input: JComponent) = {
          try {
            text.toFloat
            opaque = false
            background = Color.white
            true
          } catch { case e: Throwable =>
            opaque = true
            background = Color.red
            false
          }
        }
      })
      reactions += {
        case event: EditDone =>
          if(text.nonEmpty) setIt()
      }

    }
    val ytextField = new TextField(){
      preferredSize = new Dimension(70, preferredSize.height)

      listenTo(this)
      peer.setInputVerifier(new InputVerifier {
        override def verify(input: JComponent) = {
          try {
            text.toFloat
            opaque = false
            background = Color.white
            true
          } catch { case e: Throwable =>
            opaque = true
            background = Color.red
            false
          }
        }
      })
      reactions += {
        case event: EditDone =>
          if(text.nonEmpty) setIt()
      }
    }
    val ztextField = new TextField(){
      preferredSize = new Dimension(70, preferredSize.height)

      listenTo(this)
      peer.setInputVerifier(new InputVerifier {
        override def verify(input: JComponent) = {
          try {
            text.toFloat
            opaque = false
            background = Color.white
            true
          } catch { case e: Throwable =>
            opaque = true
            background = Color.red
            false
          }
        }
      })
      reactions += {
        case event: EditDone =>
          if(text.nonEmpty) setIt()
      }
    }

    def setIt(): Unit = {
      try {
        setSvar(ConstVec3f(xtextField.text.toFloat, ytextField.text.toFloat, ztextField.text.toFloat))
      } catch {
        case _: Throwable =>
      }
    }

    val component = new FlowPanel(xlable, xtextField, ylable, ytextField, zlable, ztextField)

    var initial = true
    /**
     * Override update if you want to use the current value of the SVar.
     * This function is initially called once and then every time the value of the SVar changes.
     */
    override def update(newValue: ConstVec3f): Unit = {
      if(initial) {
        xtextField.text = newValue.x.formatted("%.2f").replace(',','.')
        ytextField.text = newValue.y.formatted("%.2f").replace(',','.')
        ztextField.text = newValue.z.formatted("%.2f").replace(',','.')
        initial = false
      }
    }

  }

  /**
   *  The name of this visualizer.
   *  This must not be unique.
   */
  //Todo: Name it!
  val name: String = "ConstVec3f Setter"

}