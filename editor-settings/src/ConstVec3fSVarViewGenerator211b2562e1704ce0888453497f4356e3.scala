//AutoGenerated Begin
//DO NOT EDIT!
package simx.components.editor.gui

import scala.swing._
import simplex3d.math.floatx.ConstVec3f
import java.awt.Color
import scala.swing.Color

class ConstVec3fSVarViewGenerator211b2562e1704ce0888453497f4356e3 extends SVarViewGenerator[ConstVec3f] {

  def generate: SVarView[ConstVec3f] = new SVarView[ConstVec3f] {

//AutoGenerated END
//Put your code below


    val max = 500
    val data = new Array[Int](max)
    for(i <- 0 until max) data(i) = 0
    var curr = 0
    val _height = 100
    val maxValue: Float = 100

    val l = new Label {
      minimumSize = new Dimension(max+50, _height)
      preferredSize = new Dimension(max+50, _height)
      maximumSize = new Dimension(max+50, _height)

      override def paint(g: Graphics2D) {
        super.paint(g)

        g.setColor(Color.white)
        g.fillRect(0, 0, max, _height)

        g.setColor(Color.BLACK)
        g.drawString("0", 500, _height)
        g.drawString(maxValue.toString, 500, 10)


        for(i <- 0 until max){
          if(i+1 < max) g.drawLine(i, _height - data((curr + i) % max), i+1, _height - data( (curr + i + 1) % max))
        }

        g.setColor(Color.red)
        g.drawLine(0,85,max,85)

      }
    }

//    val component = new BorderPanel {
//      layout(new Label("History")) = scala.swing.BorderPanel.Position.North
//      layout(l) = scala.swing.BorderPanel.Position.Center
//    }

    val component = new BoxPanel(Orientation.Vertical) {
      border = Swing.EmptyBorder(10,10,0,0)
      contents +=  l
    }

    /**
      *  This function is called whenever the visualized value changes.
      *  It should update component accordingly.
      */
    //Todo: Implement yourself!
    def update(sVarValue: ConstVec3f) {
      data(curr) = (simplex3d.math.float.functions.length(sVarValue)*(_height/maxValue)).toInt
      curr = (curr + 1) % max
      component.repaint()
    }

  }
  //Todo: Name it!
  val name: String = "Length View [Histogram][0-100]"

}